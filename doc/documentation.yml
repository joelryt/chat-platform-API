---
openapi: 3.0.3
servers:
  - url: /api
info:
  title: Chat platform API
  version: 0.1.0
components:
  schemas:
    User:
      properties:
        password:
          description: Password for the user
          maxLength: 32
          type: string
        username:
          description: Unique username for the user
          maxLength: 16
          type: string
      required:
        - username
        - password
      type: object
    Thread:
      properties:
        title:
          description: Thread title
          maxLength: 200
          type: string
      required:
        - title
      type: object
    Message:
      properties:
        message_content:
          description: Message content
          maxLength: 500
          type: string
        timestamp:
          description: timestamp of the message
          type: string
          format: date-time
        sender_id:
          description: sender identification
          type: integer
        parent_id:
          description: message parent identification
          type: integer
        thread_id:
          description: thread identification
          type: integer
      required:
        - message_content
        - timestamp
        - sender_id
      type: object
    Reaction:
      properties:
        reaction_type:
          description: Reaction type
          type: integer
        user_id:
          description: User id of the reaction's author
          type: integer
        message_id:
          description: The id of the message the reaction is attached to
          type: integer
      required:
        - reaction_type
        - user_id
        - message_id
      type: object
    Media:
      properties:
        media_url:
          description: Web URL to an image file
          maxLength: 128
          type: string
          format: uri
          pattern: (.png|.jpg)$
        message_id:
          description: ID of the message that the media is sent with
          type: integer
      required:
        - media_url
        - message_id
  parameters:
    user:
      description: Selected user's unique username
      in: path
      name: user
      required: true
      schema:
        type: string
    thread:
      description: Selected thread's unique identification
      in: path
      name: thread
      required: true
      schema:
        type: string
    message:
      description: Selected message's unique identification
      in: path
      name: message
      required: true
      schema:
        type: string
    reaction:
      description: Selected reaction's unique identification
      in: path
      name: reaction
      required: true
      schema:
        type: string
    media:
      description: Selected media's unique identification
      in: path
      name: media
      required: true
      schema:
        type: string
  securitySchemes:
    Api-key:
      type: apiKey
      name: Api-key
      in: header
  responses:
    Unauthorized:
      description: Missing API key or provided API key is invalid
paths:
  /users/:
    post:
      description: Create a new user
      requestBody:
        description: JSON document that contains required information for creating a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: new-username
              password: new-password
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              description: URI of the created user
              schema:
                type: string
            Api-key:
              description: API key for the user
              schema:
                type: string
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Username already exists
  /users/{user}/:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      description: Get id and username of a user
      responses:
        '200':
          description: Id and username of the user
          content:
            application/json:
              example:
                user_id: 1
                username: username
        '404':
          description: The user was not found
    put:
      description: Update user's information
      requestBody:
        description: JSON document that contains required information for user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: username
              password: password
      responses:
        '204':
          description: User information updated successfully
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Username already exists
        '404':
          description: The user was not found
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - Api-key: []
    delete:
      description: Delete existing user
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: The user was not found
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - Api-key: []
  /threads/:
    post:
      description: Create a new thread
      requestBody:
        description: JSON document that contains required information for creating a thread
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
            example:
              title: new-thread
      responses:
        '201':
          description: Thread created successfully
          headers:
            Location:
              description: URI of the created thread
              schema:
                type: string
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Thread already exists
    get:
      description: Get id and title of a thread
      responses:
        '200':
          description: ID and title of the thread
          content:
            application/json:
              example:
                thread_ids: [1]
        '404':
          description: The thread was not found
  /threads/{thread}/:
    parameters:
      - $ref: '#/components/parameters/thread'
    get:
      description: Get thread objects from the database
      responses:
        '200':
          description: Thread identification
          content:
            application/json:
              example:
                thread_id: 1
                title: thread
        '404':
          description: The thread was not found
    put:
      description: Update thread's information
      requestBody:
        description: JSON document that contains required information for thread
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
            example:
              title: thread1
      responses:
        '204':
          description: Thread information updated successfully
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Thread already exists
        '404':
          description: The thread was not found
    delete:
      description: Delete existing thread
      responses:
        '204':
          description: Thread deleted successfully
        '404':
          description: The thread was not found
  /threads/{thread}/messages:
    parameters:
      - $ref: '#/components/parameters/message'
      - $ref: '#/components/parameters/thread'
    post:
      description: Create a new message
      requestBody:
        description: JSON document that contains required information for creating a message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              message: three-body-problem
              thread: 1
      responses:
        '201':
          description: Thread created successfully
          headers:
            Location:
              description: URI of the created thread
              schema:
                type: string
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Thread already exists
    get:
      description: Get message objects from the database
      responses:
        '200':
          description: Message identification
          content:
            application/json:
              example:
                message_ids: [1]
        '404':
          description: The message was not found

  /threads/{thread}/messages/{message}:
    parameters:
      - $ref: '#/components/parameters/thread'
      - $ref: '#/components/parameters/message'
    get:
      description: Get message objects from the database
      responses:
        '200':
          description: Message identification
          content:
            application/json:
              example:
                message_id: 1
                message_content: Message content
                timestamp: 2023-01-01T00:00:00.000000
                sender_id: 1
                thread_ID: 1
                parent_ID: None
        '404':
          description: The message was not found
    put:
      description: Update message's information
      requestBody:
        description: JSON document that contains required information for the message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              title: thread1
      responses:
        '204':
          description: Message information updated successfully
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Message already exists
        '404':
          description: The message was not found
    delete:
      description: Delete existing message
      responses:
        '204':
          description: Message deleted successfully
        '404':
          description: The message was not found

  /threads/{thread}/messages/{message}/reactions:
    parameters:
      - $ref: '#/components/parameters/message'
      - $ref: '#/components/parameters/thread'
    post:
      description: Create a new reaction
      requestBody:
        description: JSON document that contains required information for creating a reaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
            example:
              reaction_type: 1
              user_id: 1
              message_id: 1
      responses:
        '201':
          description: Reaction created successfully
          headers:
            Location:
              description: URI of the created reaction
              schema:
                type: string
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Reaction already exists
    get:
      description: Get reactions to a message
      responses:
        '200':
          description: Ids of the reactions to a message
          content:
            application/json:
              example:
              - reaction_ids: [1]
        '404':
          description: Reaction not found
  /threads/{thread}/messages/{message}/reactions/{reaction}:
    parameters:
      - $ref: '#/components/parameters/thread'
      - $ref: '#/components/parameters/message'
      - $ref: '#/components/parameters/reaction'
    get:
      description: Get a reaction
      responses:
        '200':
          description: Reaction data
          content:
            application/json:
              example:
                reaction_id: 1
                reaction_type: 1
                user_id: 1
                message_id: 1
        '404':
          description: The reaction was not found
    put:
      description: Update a reaction's data
      requestBody:
        description: JSON document that contains required information for reaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
            example:
              reaction_type: 1
              user_id: 1
              message_id: 1
      responses:
        '204':
          description: Reaction data updated successfully
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Reaction already exists
        '404':
          description: The reaction was not found
    delete:
      description: Delete a reaction
      responses:
        '204':
          description: Reaction deleted successfully
        '404':
          description: The reaction was not found
  /threads/{thread}/messages/{message}/media/:
    parameters:
      - $ref: '#/components/parameters/message'
      - $ref: '#/components/parameters/thread'
    post:
      description: Create new media
      requestBody:
        description: JSON document that contains required information for creating media
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
            example:
              media_id: 1
              media_url: https://upload.wikimedia.org/wikipedia/commons/5/51/Google.png
              message_id: 1
      responses:
        '201':
          description: Media created successfully
          headers:
            Location:
              description: URI of created media
              schema:
                type: string
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Media already exists
    get:
      description: Get media of a message
      responses:
        '200':
          description: media_ids of the message
          content:
            application/json:
              example:
              - media_ids: [1]
        '404':
          description: Media not found
  /threads/{thread}/messages/{message}/media/{media}:
    parameters:
      - $ref: '#/components/parameters/message'
      - $ref: '#/components/parameters/thread'
      - $ref: '#/components/parameters/media'
    get:
      description: Get a media item
      responses:
        '200':
          description: Media data
          content:
            application/json:
              example:
                media_id: 1
                media_url: https://upload.wikimedia.org/wikipedia/commons/5/51/Google.png
                message_id: 1
        '404':
          description: Media not found
    put:
      description: Edit media data
      requestBody:
        description: JSON document that contains required information for media
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
            example:
              media_id: 1
              media_url: https://upload.wikimedia.org/wikipedia/commons/5/51/Google.png
              message_id: 1
      responses:
        '204':
          description: Media data updated successfully
        '415':
          description: Request content type must be JSON
        '400':
          description: Invalid request
        '409':
          description: Media already exists
        '404':
          description: Media not found
    delete:
      description: Delete media
      responses:
        '204':
          description: Media deleted successfully
        '404':
          description: Media not found